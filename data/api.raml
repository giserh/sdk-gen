#%RAML 0.8
---
title: IsaaCloud REST API
version: "0.1"
protocols: [ HTTPS ]
baseUri: api.isaacloud.com
mediaType:  application/json
resourceTypes:
  - common:
      get?:
        responses:
          200:
            description: Success!
          500:
            body: !include schemas/error_500_schema.json
          404:
            body: !include schemas/error_other_schema.json 
          400:
            body: !include schemas/error_other_schema.json    
      patch?:
        responses:
          200:
            description: Success!
          500:
            body: !include schemas/error_500_schema.json
          404:
            body: !include schemas/error_other_schema.json 
          400:
            body: !include schemas/error_other_schema.json
      put?:
        responses:
          200:
            description: Success!
          500:
            body: !include schemas/error_500_schema.json
          404:
            body: !include schemas/error_other_schema.json 
          400:
            body: !include schemas/error_other_schema.json
      delete?:
        responses:
          200:
            description: Success!
          500:
            body: !include schemas/error_500_schema.json
          404:
            body: !include schemas/error_other_schema.json 
          400:
            body: !include schemas/error_other_schema.json      
      post?:
        responses:
          200:
            description: Success!
          500:
            body: !include schemas/error_500_schema.json
          400:
            body: !include schemas/error_other_schema.json 
securitySchemes:
  - oauth_2_0:
      description: |
        In authentication case we use OAuth2 serwer implementation, is an open standard provides a method for clients to access server resources on behalf of a resource owner.
      type: OAuth 2.0
      settings:
        accessTokenUri: oauth.isaacloud.com/token
        authorizationUri: oauth.isaacloud.com/authorize
        baseUri: oauth.isaacloud.com
securedBy: [oauth_2_0]
traits:
 - paginator:
    queryParameters:
     offset:
      description: Number of returning items
      type: number
      minLength: 1
     limit:
      description: Starting position
      type: number
      minLength: 1
 - groups:
    queryParameters:
     groups:
      description: The groups we want to narrow down our search to
      type: string
      example: 1,2,4,5
 - segments:
    queryParameters:
     segments:
      description: The segments we want to narrow down our search to.
      type: string
      example: 1,2,4,5
 - fields:
    queryParameters:
     fields:
      description: The fields we want to show in our result
      type: string
      example: id,name,description
 - ordering:
    queryParameters:
     order:
      description: The fields we want to order by and the type of ordering.
      type: string
      example: "id,name,description"
/queue:
  displayName: Queue
  /events: !include queue_events.raml
  /notifications: !include queue_notifications.raml
/cache:
  displayName: Cache
  /users: !include cache_users.raml
  /segments: !include cache_segments.raml
  /notifications: !include cache_notifications.raml
  /leaderboards: !include cache_leaderboards.raml
  /history: !include cache_history.raml
  /games: !include cache_games.raml
  /events: !include cache_events.raml
  /achievements: !include cache_achievements.raml
/admin:
  displayName: Admin
  /achievements: !include admin_achievements.raml
  /clientscripts: !include admin_clientscripts.raml
  /conditions: !include admin_conditions.raml
  /counters: !include admin_counters.raml
  /functions: !include admin_functions.raml
  /games: !include admin_games.raml
  /leaderboards: !include admin_leaderboards.raml
  /notifications: !include admin_notifications.raml
  /segments: !include admin_segments.raml
  /transactionsources: !include admin_transactionsources.raml
  /transactiontypes: !include admin_transactiontypes.raml
  /users: !include admin_users.raml
/system:
  displayName: System
  /clients: !include system_clients.raml