#%RAML 0.8
---
title: IsaaCloud REST API
version: !include data/text.raml
protocols: [ HTTPS ]
baseUri: https://isaacloud.com/{version}/api
mediaType:  application/json
securedBy: [oauth_2_0]
traits:
 - paginator:
    queryParameters:
     offset:
      description: Number of returning items
      type: number
      minLength: 1
     limit:
      description: Starting position
      type: number
      minLength: 1
 - groups:
    queryParameters:
     groups:
      description: The groups we want to narrow down our search to
      type: string
      example: 1,2,4,5
 - segments:
    queryParameters:
     segments:
      description: The segments we want to narrow down our search to.
      type: string
      example: 1,2,4,5
 - fields:
    queryParameters:
     fields:
      description: The fields we want to show in our result
      type: string
      example: id,name,description
 - ordering:
    queryParameters:
     order:
      description: The fields we want to order by and the type of ordering.
      type: string
      example: "id,name,description"
/queue:
 displayName: Queue
 /events:
  displayName: QueueEvents
  get:
   is: [ paginator, fields, ordering]
   securedBy: [oauth_2_0]
   description: Get events for a client.
   responses:
    200:
     body:
      schema: events
  post:
   is: [fields]
   securedBy: [oauth_2_0]
   description: Create a new event.
   body:
    application/json: 
     schema: |
       {
        "$schema" : "http://json-schema.org/draft-03/schema",
        "body" : "object",
        "subjectId" : "integer",
        "subjectType" : "string",
        "sourceId" : "integer",
        "priority" : "string",
        "type" : "string"
       }    
   responses:
    200:
     body:
      schema: |
       {
        "$schema" : "http://json-schema.org/draft-03/schema",
        "url" : "string",
       }
    500:
     body:
      schema: |
       {
        "$schema" : "http://json-schema.org/draft-03/schema",
        "error" : "string",
        "message" : "string"
       }
/cache:
 displayName: Cache
 /users:
  displayName: CacheUsers
  get:
   is: [ paginator, groups, segments, fields, ordering]
   securedBy: [oauth_2_0]
   description: Get users collection.
   responses:
    200:
     body:
      schema: users
  /{userId}:
   get:
    is: [fields]
    securedBy: [oauth_2_0]
    description: Get one user.
    responses:
     200:
      body:
       schema: user